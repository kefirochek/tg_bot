import sqlite3
from random import randint

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.types import BotCommand, Message

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token="–í–ê–® –¢–û–ö–ï–ù")
dp = Dispatcher()


def random_book():
    con = sqlite3.connect('books.db')
    cur = con.cursor()
    result = cur.execute(f"""SELECT name FROM book""").fetchall()
    rand = randint(0, len(result) - 1)
    select_book = (result[rand][0])
    book = cur.execute(f"""SELECT * FROM book WHERE name = '{select_book}'""").fetchall()
    con.close()
    return book[0]


def polizovat(id):
    global a
    # flag = False
    flag = False
    con = sqlite3.connect('books.db')
    cur = con.cursor()
    result_id = cur.execute(f"""SELECT user FROM users
    WHERE user = '{id}'""").fetchall()
    if result_id:
        result = cur.execute(f"""SELECT prochitano FROM users
        WHERE user = '{id}'""").fetchone()
    else:
        a = cur.execute(f'''INSERT INTO users(user) VALUES('{id}')''')
        con.commit()
        flag = True
    con.close()
    if flag:
        a = random_book()
        return str(f'{a[2]} "{a[0]}"\n{a[1]}\n–ü–æ–¥–∂–∞–Ω—Ä—ã: {a[3]}\n\n{a[5]}')
    else:
        mama = 0
        while True:
            mama += 1
            a = random_book()
            if result[0] != None:
                book_prochit = [(result[0].split('---'))[i] for i in range(len(result[0].split('---')))]
                if a[0] not in book_prochit:
                    return str(f'{a[2]} "{a[0]}"\n{a[1]}\n–ü–æ–¥–∂–∞–Ω—Ä—ã: {a[3]}\n\n{a[5]}')
                if mama == 50:
                    return str('–í—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –≤—Å–µ –º–æ–∏ –∫–Ω–∏–≥–∏!!!')
            else:
                return str(f'{a[2]} "{a[0]}"\n{a[1]}\n–ü–æ–¥–∂–∞–Ω—Ä—ã: {a[3]}\n\n{a[5]}')


# ----------------------------------------------------------------------------------------------------------------------
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
button_1 = InlineKeyboardButton(
    text='–ü—Ä–æ—á–∏—Ç–∞–Ω–æü¶ê',
    callback_data='button_1_pressed'
)

button_2 = InlineKeyboardButton(
    text='–ï—â—ë',
    callback_data='button_2_pressed'
)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[button_1], [button_2]]
)


@dp.message(Command(commands=['start']))
async def process_help_command(message: Message):
    k = polizovat(f'{message.from_user.id}')
    if k == '–í—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –≤—Å–µ –º–æ–∏ –∫–Ω–∏–≥–∏!!!':
        await message.answer(
            text=k,
        )
    else:
        await message.answer(
            text=k,
            reply_markup=keyboard
        )


# ----------------------------------------
@dp.callback_query(F.data == 'button_1_pressed')
async def process_button_1_press(callback: CallbackQuery):
    con = sqlite3.connect('books.db')
    cur = con.cursor()
    znach = cur.execute(f"""SELECT prochitano FROM users
        WHERE user = '{callback.from_user.id}'""").fetchone()
    if znach[0]:
        znach = znach[0] + '---' + a[0]
    else:
        znach = a[0]
    result = cur.execute(f"""UPDATE users
    SET prochitano = '{znach}'
    WHERE user = '{callback.from_user.id}'""").fetchall()
    con.commit()
    con.close()
    await callback.answer(text='–£–º–Ω–∏—á–∫–∞! –ë–æ–ª—å—à–µ —è –Ω–µ –ø–æ—Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ —ç—Ç—É –∫–Ω–∏–≥—É!')


@dp.callback_query(F.data == 'button_2_pressed')
async def process_button_1_press(callback: CallbackQuery):
    await callback.answer(text='–ù–∞–ø–∏—à–∏ /start')


# -----------------------------------------------------------------------------------------------------------------------
# –≤—Å—ë –¥–ª—è about

url_button_1 = InlineKeyboardButton(
    text='–¢–≥ - –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞',
    url='https://t.me/+ssL_Dvk2ckplY2Uy'
)

url_button_2 = InlineKeyboardButton(
    text='–ò–Ω—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∞',
    url=f'https://www.instagram.com/fir_fir_kefir?igsh=djdwaW1xbnQ0emZu'
)

keyboard2 = InlineKeyboardMarkup(
    inline_keyboard=[[url_button_1],
                     [url_button_2]]
)


@dp.message(Command(commands=['about']))
async def process_help_command(message: Message):
    await message.answer(
        text='–ê–≤—Ç–æ—Ä –ø—Ä–æ—Å—Ç–æ —Å–æ–≤–µ—Ç—É–µ—Ç –∫–Ω–∏–∂–∫–∏ :3',
        reply_markup=keyboard2
    )


# -----------------------------------------------------------------------------------------------------------------------

#  —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/add_new"
@dp.message(Command(commands=['add_new']))
async def process_help_command(message: Message):
    await message.answer(
        '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ\n'
        '–ù–∞–ø–∏—à–∏ –∞–≤—Ç–æ—Ä–∞\n'
        '–ñ–∞–Ω—Ä—ã –∏ –ø–æ–¥–∂–∞–Ω—Ä—ã\n'
        '–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—é–∂–µ—Ç, –∫–∞–∫ —Ç—ã –µ–≥–æ –≤–∏–¥–∏—à—å\n'
    )


# ----------------------------------------------------------------------------------------
#  —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    await message.answer(
        '/start - —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å \n'
        '/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ\n'
        '/help - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n'
        '/add_new - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É'
    )


# ----------------------------------------------------------------------------------------
# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def set_main_menu(bot: Bot):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ menu
    main_menu_commands = [
        BotCommand(command='/start', description='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'),
        BotCommand(command='/help', description='–°–ø—Ä–∞–≤–∫–∞'),
        BotCommand(command='/about', description='–û–± –∞–≤—Ç–æ—Ä–µ'),
        BotCommand(command='/add_new', description='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à—É –∫–Ω–∏–≥—É')
    ]
    await bot.set_my_commands(main_menu_commands)


@dp.message()
async def send_answer(message: Message):
    # print(message.text, message.animation, message.photo)
    await message.answer(text='–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ—Å–∏ –∫–Ω–∏–≥—É —á–µ—Ä–µ–∑ /start')


if __name__ == '__main__':
    dp.startup.register(set_main_menu)
    dp.run_polling(bot)
